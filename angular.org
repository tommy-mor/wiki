* Getting started
  make sure to have npm installed (nave use latest)
  npm install -g @angular/cli
  ng new [name of project]
  
  make a terminal window and run
  ng serve --open
  
* useful ng commands for later development
  
  ng generate component [comp name]
  ^ makes a new component and updates the right files
  
  ng generate service [service name]
  ^ makes a new service. More about this later
  
* important concepts
** components
pretty basic
example component
#+BEGIN_SRC js
import { Component, OnInit } from '@angular/core';
import { MessageService } from '../message.service';
 
@Component({
  selector: 'app-messages',
  templateUrl: './messages.component.html',
  styleUrls: ['./messages.component.css']
})
export class MessagesComponent implements OnInit {
 
  constructor(public messageService: MessageService) {}
 
  ngOnInit() {
  }
 
}
#+END_SRC
** services
   created with ng generate service [name]
   used to handle state and fetching data
   they have methods that components injected with the service can use via this.[servicename].[servicefunction]
   they are injected via the constructor of the component
   
basic example service:

#+BEGIN_SRC js
import { HttpModule } from '@angular/http'

@Injectable()
export class CustomerService {
  constructor(private http: Http) { }

  getCustomers() {
    return this.http.get('api/customers')
      .map((response: Response) => <Customer[]>response.json().data)
      .catch(this.handleError);
  }

  private handleError(error: Response) {
    console.error(error);
    return Observable.throw(error.json().error || 'Service error');
  }
}
#+END_SRC

** routing
   follow tutorial at
   https://angular.io/tutorial/toh-pt5
** http tricks
   in the service, import
import { HttpClient, HttpHeaders } from '@angular/common/http';
   import the http service into the service
   constructor(private http: HttpClient, .... other stuff maybe) { }

   its good form to put the url into a variable
   private apiUrl = 'asdf';

   you must use observables everywhere
   you have to subsrcibe to observables with a function to see what's inside them
   
   to call an api
   this.http.get<TypeOfYourChoice>(this.heroesUrl);
   
   because it is observables, use nice rxjs operators to handle that
   import it
   import { catchError, map, tap } from 'rxjs/operators';
   
   this.http.get<Type>(this.apiUrl).pipe(
       // of type (error: any) => Observable<T>
       catchError((error) => { console.log(error); return of('error occured') }),
	   //just looks at and passes on
	   tap(item => console.log(item)),
   )

   you can also put things, and add http options:
   import HttpHeaders, then
   const httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' })
   };
   this.http.put(url, data, httpoptions).pipe(tap(....), catchError(....))
   
   another thing people do is .map((response)=><Type[]>response.json().data)
   
   in handle error, you can throw errors: Observable.throw(error);
   

** templating tricks
you can reference inputs later in the html file is you do #inputVariableName on the input
   
<div>
  <label>Hero name:
    <input #heroName />
  </label>
  <!-- (click) passes input value to add() and then clears the input -->
  <button (click)="add(heroName.value); heroName.value=''">
    add
  </button>
</div>


(click)="functionInTheComponent(); property='set directly from html'"

one way binding - {{variable}}
two way binding - <input [(ngModel)]= "customer.FirstName">
property binding - <img [src]="image.url"></img>
style binding - <div [style.color]="isSelected ? 'red' : 'white'">


other directives

*** *ngIf

<div *ngIf="currentCustomer">
  Selected {{currentCustomer.Name}}
</div>
*** *ngFor
<ul>
  <li *ngFor="let customer of customers">
    {{ customer.name }}
  </li>
</ul>
*** *ngSwitch
<div [ngSwitch]="orderStatus">
  <template [ngSwitchCase]="purchased"></template>
  <template [ngSwitchCase]="shipped"></template>
  <template [ngSwitchDefault]></template>
</div>
